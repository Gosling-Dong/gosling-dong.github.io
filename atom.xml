<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gosling-dong.github.io</id>
    <title>大方志行</title>
    <updated>2019-05-30T07:22:01.388Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gosling-dong.github.io"/>
    <link rel="self" href="https://gosling-dong.github.io/atom.xml"/>
    <subtitle>见天地，知轻重</subtitle>
    <logo>https://gosling-dong.github.io/images/avatar.png</logo>
    <icon>https://gosling-dong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 大方志行</rights>
    <entry>
        <title type="html"><![CDATA[iOS 权限说明]]></title>
        <id>https://gosling-dong.github.io/post/ios-quan-xian-shuo-ming</id>
        <link href="https://gosling-dong.github.io/post/ios-quan-xian-shuo-ming">
        </link>
        <updated>2019-05-27T08:59:31.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code>Privacy - Media Library Usage Description               //获取用户媒体库说明
Privacy - Bluetooth Peripheral Usage Description        //蓝牙外设使用描述
Privacy - Calendars Usage Description                   //日历的使用说明
Privacy - Camera Usage Description                      //相机使用叙述说明
Privacy - Contacts Usage Description                    //联系人使用说明
Privacy - Health Share Usage Description                //健康分享使用描述
Privacy - Location Always Usage Description             //后台定位(在iOS设置中为'永久')
Privacy - Location Usage Description                    //需要定位
Privacy - Location When In Use Usage Description        //前台定位(在iOS设置中为'使用期间')
Privacy - Health Update Usage Description               //健康更新使用描述
Privacy - HomeKit Usage Description                  //HomeKit使用描述
Privacy - Microphone Usage Description                //麦克风的使用说明
Privacy - Motion Usage Description                    //运动使用的描述
Privacy - Photo Library Usage Description              //照片库使用说明
Privacy - Reminders Usage Description                 //提醒使用描述
Privacy - TV Provider Usage Description                 //电视提供商使用的描述 (貌似国内用不到)

iOS11新增
Privacy - NFC Reader Usage Description         //NFC使用描述
Privacy - Face ID Usage Descriptio                   //使用Face ID 
Privacy - Photo Library Additions Usage Description     //  保存图片到图库中 （重要）
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS  监听窗口的改变]]></title>
        <id>https://gosling-dong.github.io/post/macos-jian-ting-chuang-kou-de-gai-bian</id>
        <link href="https://gosling-dong.github.io/post/macos-jian-ting-chuang-kou-de-gai-bian">
        </link>
        <updated>2017-10-20T08:24:15.000Z</updated>
        <content type="html"><![CDATA[<p>监听窗口拉伸，进入全屏，即将推出全屏，已经推出全屏，最小化，窗口关闭</p>
<h2 id="观察窗口拉伸">观察窗口拉伸</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(screenResize)name:NSWindowDidResizeNotificationobject:nil];

-(void)screenResize{

//NSLog(@&quot;观察窗口拉伸&quot;);

//NSLog(@&quot;%.2f===%.2f&quot;,self.view.bounds.size.width,self.view.bounds.size.height);

}
</code></pre>
<h2 id="即将进入全屏">即将进入全屏</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(willEnterFull:)name:NSWindowWillEnterFullScreenNotificationobject:nil];

-(void)willEnterFull:(NSNotification*)notification{

NSLog(@&quot;即将全屏&quot;);

}
</code></pre>
<h2 id="即将推出全屏">即将推出全屏</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(willExitFull:)name:NSWindowWillExitFullScreenNotificationobject:nil];

-(void)willExitFull:(NSNotification*)notification {

NSLog(@&quot;即将推出全屏&quot;);

}
</code></pre>
<h2 id="已经推出全屏">已经推出全屏</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(didExitFull:)name:NSWindowDidExitFullScreenNotificationobject:nil];

-(void)didExitFull:(NSNotification*)notification{

NSLog(@&quot;推出全屏&quot;);

}
</code></pre>
<h2 id="窗口最小化">窗口最小化</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(didMiniaturize:)name:NSWindowDidMiniaturizeNotificationobject:nil];

-(void)didMiniaturize:(NSNotification*)notification{

NSLog(@&quot;窗口变小&quot;);

}
</code></pre>
<h2 id="窗口即将关闭">窗口即将关闭</h2>
<pre><code>[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(willClose:)name:NSWindowWillCloseNotificationobject:nil];

-(void)willClose:(NSNotification*)notification{

NSLog(@&quot;窗口关闭&quot;);

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS  NSButton 字体颜色]]></title>
        <id>https://gosling-dong.github.io/post/macos-nsbutton-zi-ti-yan-se</id>
        <link href="https://gosling-dong.github.io/post/macos-nsbutton-zi-ti-yan-se">
        </link>
        <updated>2017-09-22T08:03:07.000Z</updated>
        <content type="html"><![CDATA[<p>MacOS  NSButton 字体颜色
<strong>初始化NSbutton（这里就不做布局设置了）</strong></p>
<pre><code>NSButton *btn = [[NSButton alloc]init];
</code></pre>
<p><strong>设置button风格为Square</strong></p>
<pre><code>[btn setBezelStyle:NSBezelStyleRegularSquare];
</code></pre>
<p>**设置字体颜色 **</p>
<pre><code>[self setButtonColor: btn];
</code></pre>
<pre><code>- (void)setButtonColor:(NSButton*)btn{

NSMutableParagraphStyle*btnStyle = [[NSMutableParagraphStylealloc]init];

btnStyle.alignment=NSTextAlignmentCenter;

NSDictionary *dicAtt =@{NSForegroundColorAttributeName:[NSColor redColor],NSParagraphStyleAttributeName: btnStyle};

//给NSButton先赋值一个字符串，为的是后面替换，如果NSButton的title是空字符串的话，也会内存泄漏

btn.title=@&quot;清空全部&quot;;//这里的字符串长度要和后面的设置的长度一样 这里可以随便填

NSMutableAttributedString*attTitle = [[NSMutableAttributedString alloc]initWithAttributedString:btn.attributedTitle];

//替换文字

[attTitle replaceCharactersInRange:NSMakeRange(0,4)withString:@&quot;清空全部&quot;];

[attTitle addAttributes:dicAttrange:NSMakeRange(0,4)];

btn.attributedTitle= attTitle;

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOS 文件拖入窗口]]></title>
        <id>https://gosling-dong.github.io/post/macos-wen-jian-tuo-ru-chuang-kou</id>
        <link href="https://gosling-dong.github.io/post/macos-wen-jian-tuo-ru-chuang-kou">
        </link>
        <updated>2017-09-21T08:33:28.000Z</updated>
        <content type="html"><![CDATA[<p>看到很多Mac上的工具类应用都可以直接拖入图片 或者 拖入文件直接使用，今天就来说一下文件拖入的使用方法</p>
<p>首先 新建一个文件继承NSView；
声明一个BOOL值</p>
<pre><code>@property(nonatomic,assign)BOOL isDragIn;
</code></pre>
<pre><code>- (void)drawRect:(NSRect)dirtyRect {

       [superdrawRect:dirtyRect];

       [self registerForDraggedTypes:[NSArray arrayWithObjects:NSFilenamesPboardType,nil]];

       if(_isDragIn) {

       NSLog(@&quot;拖拽了&quot;);

    }
}
</code></pre>
<pre><code>- (NSDragOperation)draggingEntered:(id)sender
{
_isDragIn=YES;

[self setNeedsDisplay:YES];

return NSDragOperationCopy;

}
</code></pre>
<pre><code>- (void)draggingExited:(id)sender{

_isDragIn=NO;

[self setNeedsDisplay:YES];

}
</code></pre>
<pre><code>- (BOOL)prepareForDragOperation:(id)sender{

_isDragIn=NO;

[self setNeedsDisplay:YES];

returnYES;

}
</code></pre>
<pre><code>- (BOOL)performDragOperation:(id)sender{

if([senderdraggingSource] !=self)

{

NSArray* filePaths = [[sender draggingPasteboard] propertyListForType:NSFilenamesPboardType];

NSLog(@&quot;文件地址%@&quot;,filePaths);

}

return YES;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacOX  关于鼠标的停滞隐藏]]></title>
        <id>https://gosling-dong.github.io/post/macox-guan-yu-shu-biao-de-ting-zhi-yin-cang</id>
        <link href="https://gosling-dong.github.io/post/macox-guan-yu-shu-biao-de-ting-zhi-yin-cang">
        </link>
        <updated>2017-09-20T06:46:40.000Z</updated>
        <content type="html"><![CDATA[<p>MacOX  关于鼠标的停滞隐藏</p>
<p><strong>首先，mac上的鼠标事件和web一样，有悬停方法等。</strong></p>
<h1 id="开启鼠标悬停事件">开启鼠标悬停事件</h1>
<h3 id="先声明">先声明：</h3>
<pre><code>@property(nonatomic,strong) NSTrackingArea *trackingArea;
</code></pre>
<h2 id="在需要的时候调用这个方法">在需要的时候调用这个方法</h2>
<pre><code>-(void)openMouseOverflowEvent{

				NSTrackingAreaOptions  options = NSTrackingMouseEnteredAndExited | NSTrackingActiveAlways | NSTrackingMouseMoved;
				self.TrackingArea = [[NSTrackingArea alloc] initWithRect:self.view.bounds options:options owner:self.view userInfo:nil];
				[self.view addTrackingArea:self.trackingArea];
				NSLog(@&quot;开启鼠标悬停&quot;);
}
</code></pre>
<p>这样就开启了鼠标事件</p>
<p><strong>NSTrackingMouseEnteredAndExited  代表鼠标进入窗口和离开窗口</strong></p>
<p><strong>NSTrackingMouseMoved  代表鼠标在窗口上移动</strong></p>
<h2 id="鼠标进入窗口事件">鼠标进入窗口事件</h2>
<pre><code>- (void) mouseEntered:(NSEvent *) theEvent{

            if(self.trackingArea != nil) {
								NSLog(@&quot;鼠标进入控制器&quot;);
						}else{
							[self openMouseOverflowEvent];
           }
}
</code></pre>
<h2 id="鼠标离开窗口事件">鼠标离开窗口事件</h2>
<pre><code>-(void)mouseExited:(NSEvent*)theEvent{

      if(_trackingArea != nil) {
						 NSLog(@&quot;鼠标离开控制器&quot;);
     }else{
						[self closeMouseOverflowEvent];
}
</code></pre>
<h2 id="鼠标移动事件">鼠标移动事件</h2>
<pre><code>- (void)mouseMoved:(NSEvent*)event{
     NSLog(@&quot;鼠标移动&quot;);
}
</code></pre>
<h2 id="关闭鼠标悬停事件">关闭鼠标悬停事件</h2>
<pre><code>- (void)closeMouseOverflowEvent{
				[self.view removeTrackingArea:_trackingArea];
				_trackingArea=nil;
				NSLog(@&quot;关闭鼠标悬停&quot;);
}
</code></pre>
<p><em><strong>接下来说一说 鼠标隐藏方法</strong></em></p>
<h2 id="鼠标隐藏">鼠标隐藏</h2>
<pre><code>//隐藏鼠标
[NSCursor setHiddenUntilMouseMoves:YES];
</code></pre>
<h3 id="使用">使用</h3>
<pre><code>dispatch_queue_t  queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0);
dispatch_after(dispatch_time(DISPATCH_TIME_NOW,  (int64_t)(2.5*NSEC_PER_SEC)),  queue, ^{
[NSCursor setHiddenUntilMouseMoves:YES];
});
</code></pre>
]]></content>
    </entry>
</feed>